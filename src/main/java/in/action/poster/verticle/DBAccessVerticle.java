package in.action.poster.verticle;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Map;

@Slf4j
public class DBAccessVerticle extends AbstractVerticle {


  private static final JsonObject config = new JsonObject()
    .put("url", "jdbc:hsqldb:mem:test?shutdown=true")
    .put("driver_class", "org.hsqldb.jdbcDriver")
    .put("max_pool_size", 30);

  @Override
  public void start(Future<Void> startFuture) throws Exception {

    var eventBus = vertx.eventBus();

    eventBus.consumer("db-save-user-todb", this::messageHandler);

    var client = JDBCClient.createShared(vertx, config);

    client.getConnection(res -> {
      if (res.succeeded()) {
        var createTableSql = "CREATE TABLE USERS (ID int generated by default as identity (start with 1 increment by 1) not null," +
          "USERNAME varchar(255), PASSWORD varchar(255));";
        var connection = res.result();
        connection.execute(createTableSql, execute -> {
          if (execute.succeeded()) {
            log.debug("Table created !");
          } else {
            log.debug("Table created ! FAILED");
          }
        });
      }
    });

    startFuture.complete();
  }


  private void messageHandler(Message<JsonObject> event){
    var body = event.body();
    log.debug("body : {}", body);

    var dataMap =body.getMap();
    var username = body.getString("username");
    var password = body.getString("password");

    var client = JDBCClient.createShared(vertx, config);

    client.getConnection(res -> {
      if (res.succeeded()) {
        var connection = res.result();
        var sql = "INSERT INTO USERS (ID, USERNAME, PASSWORD) VALUES(null, ? ,?)";
        var param = new JsonArray(List.of(username, password));
        connection.updateWithParams(sql, param, update -> {
          log.debug("update with param callback: {}", update.succeeded());
          if (update.succeeded()) {
            dataMap.put("saved", true);
            reply(event, dataMap);
          }else {
            log.debug("fail cause : {}", update.cause());
            log.error("insert fail ", update.cause());
            unsaved(dataMap);
            reply(event, dataMap);
          }
        });
      }else {
        unsaved(dataMap);
        reply(event, dataMap);
      }
    });
  }


  private void unsaved(Map<String, Object> dataMap){
    dataMap.put("saved", false);
    log.debug("insert fail");
  }

  private void reply(Message<JsonObject> event, Object data){
    event.reply(Json.encodePrettily(data));
  }


}
